{"version":3,"file":"metadata.min.js","sources":["../src/index.ts"],"sourcesContent":["declare global {\n  interface DocumentEventMap {\n    'app-metadata': CustomEvent<Metadata>\n  }\n}\n\nexport function addMetadataListener() {\n  document.addEventListener('app-metadata', OnAppMetadata)\n}\n\nfunction OnAppMetadata(e: CustomEvent<Metadata>) {\n  updateMetadata(e.detail)\n}\n\nexport type Metadata = { [key: string]: string }\n\nexport function updateMetadata(data: Metadata) {\n  setMedatadata({ ...data, url: data.url || document.location.href })\n}\n\nfunction setMedatadata(data: Metadata) {\n  const keysUsed: string[] = []\n  const keys = Object.keys(data)\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const value = data[key]\n\n    switch (key) {\n      case 'title':\n        document.title = value\n        break;\n      default:\n        keysUsed.push(setMetaValue(key, value))\n        break\n    }\n\n    switch (key) {\n      case 'title':\n      case 'description':\n      case 'image':\n      case 'url':\n        keysUsed.push(setMetaValue('og:' + key, value))\n        keysUsed.push(setMetaValue('twitter:' + key, value))\n        break\n    }\n  }\n\n  const keysExisting = Object.keys(metaElements)\n  for (let i = 0; i < keysExisting.length; i++) {\n    const key = keysExisting[i]\n    if (keysUsed.indexOf(key) === -1) {\n      document.head.removeChild(metaElements[key])\n      delete metaElements[key]\n    }\n  }\n}\n\n/**\n * Object to keep track of added meta elements so that\n * they can be reused or removed as necessary\n */\nconst metaElements: { [key: string]: HTMLMetaElement } = {}\n\nfunction setMetaValue(key: string, value: string) {\n  const attrName = key.startsWith('og:') ? 'property' : 'name'\n\n  // re-use any already-created meta-tags if possible\n  let element = metaElements[key]\n  if (!element) {\n    // check for existing element (maybe in original server-rendered page)\n    const selector = `meta[${attrName}=\"${key}\"]`\n    element = <HTMLMetaElement>document.head.querySelector(selector)\n    if (!element) {\n      // otherwise create a new element\n      element = document.createElement('meta')\n      element.setAttribute(attrName, key)\n      document.head.appendChild(element)\n    }\n    metaElements[key] = element\n  }\n\n  // set the new value\n  element.content = value\n  return key\n}\n"],"names":["e","updateMetadata","detail","data","keysUsed","keys","Object","i","length","key","value","document","title","push","setMetaValue","keysExisting","metaElements","indexOf","head","removeChild","setMedatadata","url","location","href","attrName","startsWith","element","selector","querySelector","createElement","setAttribute","appendChild","content","addEventListener","OnAppMetadata"],"mappings":"4CAUA,WAAuBA,GACrBC,EAAeD,EAAEE,mBAKYC,IAI/B,SAAuBA,GACrB,MAAMC,KACAC,EAAOC,OAAOD,KAAKF,GACzB,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,MAAME,EAAMJ,EAAKE,GACXG,EAAQP,EAAKM,GAEnB,OAAQA,GACN,IAAK,QACHE,SAASC,MAAQF,EACjB,MACF,QACEN,EAASS,KAAKC,EAAaL,EAAKC,IAIpC,OAAQD,GACN,IAAK,QACL,IAAK,cACL,IAAK,QACL,IAAK,MACHL,EAASS,KAAKC,EAAa,MAAQL,EAAKC,IACxCN,EAASS,KAAKC,EAAa,WAAaL,EAAKC,KAKnD,MAAMK,EAAeT,OAAOD,KAAKW,GACjC,IAAK,IAAIT,EAAI,EAAGA,EAAIQ,EAAaP,OAAQD,IAAK,CAC5C,MAAME,EAAMM,EAAaR,IACM,IAA3BH,EAASa,QAAQR,KACnBE,SAASO,KAAKC,YAAYH,EAAaP,WAChCO,EAAaP,KAnCxBW,kBAAmBjB,GAAMkB,IAAKlB,EAAKkB,KAAOV,SAASW,SAASC,QA4C9D,MAAMP,KAEN,WAAsBP,EAAaC,GACjC,MAAMc,EAAWf,EAAIgB,WAAW,OAAS,WAAa,OAGtD,IAAIC,EAAUV,EAAaP,GAC3B,IAAKiB,EAAS,CAEZ,MAAMC,UAAmBH,MAAaf,OACtCiB,EAA2Bf,SAASO,KAAKU,cAAcD,OAGrDD,EAAUf,SAASkB,cAAc,SACzBC,aAAaN,EAAUf,GAC/BE,SAASO,KAAKa,YAAYL,IAE5BV,EAAaP,GAAOiB,EAKtB,OADAA,EAAQM,QAAUtB,EACXD,mCA5EPE,SAASsB,iBAAiB,eAAgBC"}