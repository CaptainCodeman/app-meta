{"version":3,"file":"metadata.js","sources":["../src/index.ts"],"sourcesContent":["declare global {\n  interface DocumentEventMap {\n    'app-metadata': CustomEvent<Metadata>\n  }\n}\n\nexport function addMetadataListener() {\n  document.addEventListener('app-metadata', OnAppMetadata)\n}\n\nfunction OnAppMetadata(e: CustomEvent<Metadata>) {\n  updateMetadata(e.detail)\n}\n\nexport type Metadata = { [key: string]: string }\n\nexport type MetadataEntry = { key: string, value: string }\n\nexport function updateMetadata(data: Metadata, entries?: MetadataEntry[][] ) {\n  syncMedatadata({ ...data, url: data.url || document.location.href }, entries)\n}\n\nconst head = document.head\n\nfunction syncMedatadata(data: Metadata, entries?: MetadataEntry[][]) {\n  const keys = Object.keys(data)\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const value = data[key]\n\n    switch (key) {\n      case 'title':\n        document.title = value\n        break;\n      default:\n        setMetaValue(0, key, value)\n        break\n    }\n\n    switch (key) {\n      case 'title':\n      case 'description':\n      case 'image':\n      case 'url':\n        setMetaValue(0, 'og:' + key, value)\n        setMetaValue(0, 'twitter:' + key, value)\n        break\n    }\n  }\n\n  if (entries) {\n    for (let i = 0; i < entries.length; i++) {\n      const set = entries[i]\n      for (let j = 0; j < set.length; j++) {\n        const entry = set[j]\n        setMetaValue(i, entry.key, entry.value)\n      }\n    }\n  }\n\n  cleanupUnused()\n}\n\n// keep track of added meta elements so that\n// they can be reused or removed as required\ntype metaMap = { [key: string]: HTMLMetaElement[] }\nconst metaElements: metaMap = {}\n\nconst propertyPrefixes = ['fb', 'og', 'product']\n\nfunction getAttrName(key: string) {\n  const parts = key.split(':')\n  return parts.length === 1 || propertyPrefixes.indexOf(parts[0]) === -1\n    ? 'name'\n    : 'property'\n}\n\nfunction setMetaValue(index: number, key: string, value: string) {\n  const attrName = getAttrName(key)\n\n  let element: HTMLMetaElement | undefined\n  let elements = metaElements[key]\n  if (elements) {\n    element = elements[index]\n  } else {\n    elements = []\n    metaElements[key] = elements\n  }\n\n  if (element) {\n    element.content = value\n  } else {\n    const selector = `meta[${attrName}=\"${key}\"]`\n\n    let element = index\n      ? <HTMLMetaElement>head.querySelectorAll(selector)[index]\n      : <HTMLMetaElement>head.querySelector(selector)\n\n    if (!element) {\n      // otherwise create a new element\n      element = document.createElement('meta')\n      element.setAttribute(attrName, key)\n      head.appendChild(element)\n    }\n\n    element.content = value\n    elements[index] = element\n  }\n\n  updated[key] = index + 1\n}\n\n// count of updated metadata used in each iteration\nlet updated : { [key: string]: number } = {}\n\n// cleanup previously existing metatags that are now unused\nfunction cleanupUnused() {\n  const keys = Object.keys(metaElements)\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const elements = metaElements[key]\n    const used = updated[key] || 0\n    if (elements.length > used) {\n      for (let n = used; n < elements.length; n++) {\n        head.removeChild(elements[n])\n      }\n      elements.splice(used)\n    }\n  }\n\n  // reset for next time\n  updated = {}\n}\n"],"names":["document","addEventListener","OnAppMetadata","e","updateMetadata","detail","data","entries","syncMedatadata","url","location","href","head","keys","Object","i","length","key","value","title","setMetaValue","set","j","entry","cleanupUnused","metaElements","propertyPrefixes","parts","split","indexOf","index","attrName","getAttrName","element","elements","content","selector","querySelectorAll","querySelector","createElement","setAttribute","appendChild","updated","used","n","removeChild","splice"],"mappings":"4CAOEA,SAASC,iBAAiB,eAAgBC,eAG5C,uBAAuBC,GACrBC,eAAeD,EAAEE,QAOnB,wBAA+BC,EAAgBC,GAC7CC,gCAAoBF,GAAMG,IAAKH,EAAKG,KAAOT,SAASU,SAASC,OAAQJ,0DAGvE,MAAMK,KAAOZ,SAASY,KAEtB,wBAAwBN,EAAgBC,GACtC,MAAMM,EAAOC,OAAOD,KAAKP,GAEzB,IAAK,IAAIS,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,MAAME,EAAMJ,EAAKE,GACXG,EAAQZ,EAAKW,GAEnB,OAAQA,GACN,IAAK,QACHjB,SAASmB,MAAQD,EACjB,MACF,QACEE,aAAa,EAAGH,EAAKC,GAIzB,OAAQD,GACN,IAAK,QACL,IAAK,cACL,IAAK,QACL,IAAK,MACHG,aAAa,EAAG,MAAQH,EAAKC,GAC7BE,aAAa,EAAG,WAAaH,EAAKC,IAKxC,GAAIX,EACF,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAAK,CACvC,MAAMM,EAAMd,EAAQQ,GACpB,IAAK,IAAIO,EAAI,EAAGA,EAAID,EAAIL,OAAQM,IAAK,CACnC,MAAMC,EAAQF,EAAIC,GAClBF,aAAaL,EAAGQ,EAAMN,IAAKM,EAAML,QAKvCM,gBAMF,MAAMC,gBAEAC,kBAAoB,KAAM,KAAM,WAEtC,qBAAqBT,GACnB,MAAMU,EAAQV,EAAIW,MAAM,KACxB,OAAwB,IAAjBD,EAAMX,SAAwD,IAAxCU,iBAAiBG,QAAQF,EAAM,IACxD,OACA,WAGN,sBAAsBG,EAAeb,EAAaC,GAChD,MAAMa,EAAWC,YAAYf,GAE7B,IAAIgB,EACAC,EAAWT,aAAaR,GAQ5B,GAPIiB,EACFD,EAAUC,EAASJ,IAEnBI,KACAT,aAAaR,GAAOiB,GAGlBD,EACFA,EAAQE,QAAUjB,MACb,CACL,MAAMkB,UAAmBL,MAAad,MAEtC,IAAIgB,EAAUH,EACOlB,KAAKyB,iBAAiBD,GAAUN,GAChClB,KAAK0B,cAAcF,GAEnCH,KAEHA,EAAUjC,SAASuC,cAAc,SACzBC,aAAaT,EAAUd,GAC/BL,KAAK6B,YAAYR,IAGnBA,EAAQE,QAAUjB,EAClBgB,EAASJ,GAASG,EAGpBS,QAAQzB,GAAOa,EAAQ,EAIzB,IAAIY,WAGJ,yBACE,MAAM7B,EAAOC,OAAOD,KAAKY,cACzB,IAAK,IAAIV,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,MAAME,EAAMJ,EAAKE,GACXmB,EAAWT,aAAaR,GACxB0B,EAAOD,QAAQzB,IAAQ,EAC7B,GAAIiB,EAASlB,OAAS2B,EAAM,CAC1B,IAAK,IAAIC,EAAID,EAAMC,EAAIV,EAASlB,OAAQ4B,IACtChC,KAAKiC,YAAYX,EAASU,IAE5BV,EAASY,OAAOH,IAKpBD"}