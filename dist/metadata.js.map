{"version":3,"file":"metadata.js","sources":["../src/index.ts"],"sourcesContent":["declare global {\n  interface DocumentEventMap {\n    'app-metadata': CustomEvent<Metadata>\n  }\n}\n\nexport function addMetadataListener() {\n  document.addEventListener('app-metadata', OnAppMetadata)\n}\n\nfunction OnAppMetadata(e: CustomEvent<Metadata>) {\n  updateMetadata(e.detail)\n}\n\nexport type Metadata = { [key: string]: string }\n\nexport function updateMetadata(data: Metadata) {\n  setMedatadata({ ...data, url: data.url || document.location.href })\n}\n\nfunction setMedatadata(data: Metadata) {\n  const keysUsed: string[] = []\n  const keys = Object.keys(data)\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    const value = data[key]\n\n    switch (key) {\n      case 'title':\n        document.title = value\n        break;\n      default:\n        keysUsed.push(setMetaValue(key, value))\n        break\n    }\n\n    switch (key) {\n      case 'title':\n      case 'description':\n      case 'image':\n      case 'url':\n        keysUsed.push(setMetaValue('og:' + key, value))\n        keysUsed.push(setMetaValue('twitter:' + key, value))\n        break\n    }\n  }\n\n  const keysExisting = Object.keys(metaElements)\n  for (let i = 0; i < keysExisting.length; i++) {\n    const key = keysExisting[i]\n    if (keysUsed.indexOf(key) === -1) {\n      document.head.removeChild(metaElements[key])\n      delete metaElements[key]\n    }\n  }\n}\n\n/**\n * Object to keep track of added meta elements so that\n * they can be reused or removed as necessary\n */\nconst metaElements: { [key: string]: HTMLMetaElement } = {}\n\nfunction setMetaValue(key: string, value: string) {\n  const attrName = key.startsWith('og:') ? 'property' : 'name'\n\n  // re-use any already-created meta-tags if possible\n  let element = metaElements[key]\n  if (!element) {\n    // check for existing element (maybe in original server-rendered page)\n    const selector = `meta[${attrName}=\"${key}\"]`\n    element = <HTMLMetaElement>document.head.querySelector(selector)\n    if (!element) {\n      // otherwise create a new element\n      element = document.createElement('meta')\n      element.setAttribute(attrName, key)\n      document.head.appendChild(element)\n    }\n    metaElements[key] = element\n  }\n\n  // set the new value\n  element.content = value\n  return key\n}\n"],"names":["document","addEventListener","OnAppMetadata","e","updateMetadata","detail","data","setMedatadata","url","location","href","keysUsed","keys","Object","i","length","key","value","title","push","setMetaValue","keysExisting","metaElements","indexOf","head","removeChild","attrName","startsWith","element","selector","querySelector","createElement","setAttribute","appendChild","content"],"mappings":"4CAOEA,SAASC,iBAAiB,eAAgBC,eAG5C,uBAAuBC,GACrBC,eAAeD,EAAEE,QAKnB,wBAA+BC,GAC7BC,+BAAmBD,GAAME,IAAKF,EAAKE,KAAOR,SAASS,SAASC,QAG9D,uBAAuBJ,GACrB,MAAMK,KACAC,EAAOC,OAAOD,KAAKN,GACzB,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,MAAME,EAAMJ,EAAKE,GACXG,EAAQX,EAAKU,GAEnB,OAAQA,GACN,IAAK,QACHhB,SAASkB,MAAQD,EACjB,MACF,QACEN,EAASQ,KAAKC,aAAaJ,EAAKC,IAIpC,OAAQD,GACN,IAAK,QACL,IAAK,cACL,IAAK,QACL,IAAK,MACHL,EAASQ,KAAKC,aAAa,MAAQJ,EAAKC,IACxCN,EAASQ,KAAKC,aAAa,WAAaJ,EAAKC,KAKnD,MAAMI,EAAeR,OAAOD,KAAKU,cACjC,IAAK,IAAIR,EAAI,EAAGA,EAAIO,EAAaN,OAAQD,IAAK,CAC5C,MAAME,EAAMK,EAAaP,IACM,IAA3BH,EAASY,QAAQP,KACnBhB,SAASwB,KAAKC,YAAYH,aAAaN,WAChCM,aAAaN,4DAS1B,MAAMM,gBAEN,sBAAsBN,EAAaC,GACjC,MAAMS,EAAWV,EAAIW,WAAW,OAAS,WAAa,OAGtD,IAAIC,EAAUN,aAAaN,GAC3B,IAAKY,EAAS,CAEZ,MAAMC,UAAmBH,MAAaV,OACtCY,EAA2B5B,SAASwB,KAAKM,cAAcD,OAGrDD,EAAU5B,SAAS+B,cAAc,SACzBC,aAAaN,EAAUV,GAC/BhB,SAASwB,KAAKS,YAAYL,IAE5BN,aAAaN,GAAOY,EAKtB,OADAA,EAAQM,QAAUjB,EACXD"}